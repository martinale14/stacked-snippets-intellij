<?xml version="1.0" encoding="UTF-8"?>
<templateSet group="Flutter stacked">
    <template name="cds" value="part '$FILENAME$.chopper.dart';&#10;&#10;@ChopperApi()&#10;abstract class $DataSourceName$ extends ChopperService {&#10;&#10;  static _$$$DataSourceName$ create([ChopperClient? client]) =&gt;&#10;      _$$$DataSourceName$(client);&#10;}" description="Creates a DataSource from Chopper Api" toReformat="false" toShortenFQNames="true">
        <variable name="FILENAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
        <variable name="DataSourceName" expression="&quot;DataSourceName&quot;" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="DART_STATEMENT" value="true" />
        </context>
    </template>
    <template name="sbh" value="const SizedBox(height: $height$)," description="Creates a Sized Box with the given height" toReformat="false" toShortenFQNames="true">
        <variable name="height" expression="&quot;height&quot;" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="DART_STATEMENT" value="true" />
        </context>
    </template>
    <template name="sbw" value="const SizedBox(width: $width$)," description="Creates a Sized Box with the given width" toReformat="false" toShortenFQNames="true">
        <variable name="width" expression="&quot;width&quot;" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="DART_STATEMENT" value="true" />
        </context>
    </template>
    <template name="csbh" value="const SizedBox(height: $height$)," description="Creates a const Sized Box with the given height" toReformat="false" toShortenFQNames="true">
        <variable name="height" expression="&quot;height&quot;" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="DART_STATEMENT" value="true" />
        </context>
    </template>
    <template name="csbw" value="const SizedBox(width: $width$)," description="Creates a const Sized Box with the given width" toReformat="false" toShortenFQNames="true">
        <variable name="width" expression="&quot;width&quot;" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="DART_STATEMENT" value="true" />
        </context>
    </template>
    <template name="vmbr" value="ViewModelBuilder&lt;$ViewModel$&gt;.reactive(&#10;    viewModelBuilder: () =&gt; $ViewModel$(),&#10;    builder: (context, viewModel, child) =&gt; SizedBox.shrink(),&#10;);" description="Creates a reactive ViewModelBuilder" toReformat="false" toShortenFQNames="true">
        <variable name="ViewModel" expression="&quot;ViewModel&quot;" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="DART_STATEMENT" value="true" />
        </context>
    </template>
    <template name="vmbn" value="ViewModelBuilder&lt;$ViewModel$&gt;.nonReactive(&#10;    viewModelBuilder: () =&gt; $ViewModel$(),&#10;    builder: (context, viewModel, child) =&gt; SizedBox.shrink(),&#10;);" description="Creates a non reactive ViewModelBuilder" toReformat="false" toShortenFQNames="true">
        <variable name="ViewModel" expression="&quot;ViewModel&quot;" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="DART_STATEMENT" value="true" />
        </context>
    </template>
    <template name="vmw" value="class $WidgetName$ extends ViewModelWidget&lt;$ViewModel$&gt; {&#10;    const $WidgetName$({super.key});&#10;    &#10;    @override&#10;    Widget build(&#10;            BuildContext context, $ViewModel$ viewModel) =&gt;&#10;        const SizedBox.shrink();&#10;}" description="Creates a ViewModel Widget with a ViewModel" toReformat="false" toShortenFQNames="true">
        <variable name="WidgetName" expression="&quot;WidgetName&quot;" defaultValue="" alwaysStopAt="true" />
        <variable name="ViewModel" expression="&quot;ViewModel&quot;" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="DART_STATEMENT" value="true" />
        </context>
    </template>
    <template name="lservice" value="@lazySingleton&#10;class $ServiceName$ extends $ServiceBaseClass$ {&#10;    @factoryMethod&#10;    $ServiceName$();&#10;}" description="Creates a Stacked Listenable Service" toReformat="false" toShortenFQNames="true">
        <variable name="ServiceName" expression="&quot;ServiceName&quot;" defaultValue="" alwaysStopAt="true" />
        <variable name="ServiceBaseClass" expression="&quot;ServiceBaseClass&quot;" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="DART_STATEMENT" value="true" />
        </context>
    </template>
    <template name="jmodel" value="part '$FILENAME$.g.dart';&#10;&#10;@JsonSerializable()&#10;class $ModelName$ {&#10;    &#10;    $ModelName$();&#10;    &#10;    factory $ModelName$.fromJson(&#10;        Map&lt;String, dynamic&gt; json) =&gt;&#10;            _$$$ModelName$FromJson(json);&#10;    &#10;    Map&lt;String, dynamic&gt; toJson() =&gt;&#10;        _$$$ModelName$ToJson(this);&#10;}" description="Creates a model with annotations from json annotations package" toReformat="false" toShortenFQNames="true">
        <variable name="FILENAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
        <variable name="ModelName" expression="&quot;ModelName&quot;" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="DART_STATEMENT" value="true" />
        </context>
    </template>
    <template name="bvm" value="class $ViewModel$ extends $AppBaseViewmodel$ {&#10;&#10;    bool get loading =&gt; false;&#10;    &#10;    @override&#10;    List&lt;ListenableServiceMixin&gt; get listenableServices =&gt; [];&#10;    &#10;    $ViewModel$();&#10;}" description="Creates a ViewModel based on a existing base ViewModel" toReformat="false" toShortenFQNames="true">
        <variable name="ViewModel" expression="&quot;ViewModel&quot;" defaultValue="" alwaysStopAt="true" />
        <variable name="AppBaseViewmodel" expression="&quot;AppBaseViewmodel&quot;" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="DART_STATEMENT" value="true" />
        </context>
    </template>
    <template name="brep" value="@injectable&#10;class $Repository$ extends $BaseRepository$&lt;$DataSource$&gt; {&#10;    &#10;    $Repository$.from({super.datasource});&#10;}" description="Creates a repository with a given datasource" toReformat="false" toShortenFQNames="true">
        <variable name="BaseRepository" expression="&quot;BaseRepository&quot;" defaultValue="" alwaysStopAt="true" />
        <variable name="DataSource" expression="&quot;DataSource&quot;" defaultValue="" alwaysStopAt="true" />
        <variable name="Repository" expression="&quot;Repository&quot;" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="DART_STATEMENT" value="true" />
        </context>
    </template>
    <template name="sview" value="class $Screen$ extends StackedView&lt;$ViewModel$&gt; {&#10;    const $Screen$({super.key});&#10;    &#10;    @override&#10;    Widget builder(&#10;            BuildContext context, $ViewModel$ viewModel, Widget? child) =&gt;&#10;        const SizedBox.shrink();&#10;       &#10;    @override&#10;    $ViewModel$ viewModelBuilder(BuildContext context) =&gt; $ViewModel$();&#10;}" description="Creates a stacked view from a ViewModel" toReformat="false" toShortenFQNames="true">
        <variable name="Screen" expression="&quot;Screen&quot;" defaultValue="" alwaysStopAt="true" />
        <variable name="ViewModel" expression="&quot;ViewModel&quot;" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="DART_STATEMENT" value="true" />
        </context>
    </template>
    <template name="impst" value="import 'package:stacked/stacked.dart';" description="Generate stacked import" toReformat="false" toShortenFQNames="true">
        <context>
            <option name="DART_STATEMENT" value="true" />
        </context>
    </template>
</templateSet>